#!/bin/bash

function check_file() {
    if [ ! -f "$1" ];then
        echo "文件: [$1] 不存在!"
        if [ "$2" == "" ];then
            exit 1
        else
            sleep $2
        fi
    fi
}

function check_dir() {
    if [ ! -d "$1" ];then
        echo "目录: [$1] 不存在!"
        if [ "$2" == "" ];then
            exit 1
        else
            sleep $2
        fi
    fi
}

function check_block_dev() {
    if [ ! -b "$1" ];then
        echo "块设备: [$1] 不存在!"
        if [ "$2" == "" ];then
            exit 1
        else
            sleep $2
        fi
    fi
}

function check_k510() {
    # 判断内核版本是否 >= 5.10
    K_VER=$(echo "$KERNEL_VERSION" | cut -d '.' -f1)
    K_MAJ=$(echo "$KERNEL_VERSION" | cut -d '.' -f2)

    if [ $K_VER -eq 5 ];then
        if [ $K_MAJ -ge 10 ];then
            K510=1
        else
            K510=0
        fi
    elif [ $K_VER -gt 5 ];then
        K510=1
    else
        K510=0
    fi
    export K510
}

function check_depends() {
    if [ $(id -u) -ne 0 ];then
        echo "这个脚本需要用root用户来执行，你好象不是root吧？"
        exit 1
    fi

    if mkfs.btrfs -V >/dev/null;then
        echo "check mkfs.btrfs ok"
    else
        echo "mkfs.btrfs 程序不存在，请安装 btrfs-progs"
        exit 1
    fi

    if mkfs.vfat --help 1>/dev/nul 2>&1;then
        echo "check mkfs.vfat ok"
    else
        echo "mkfs.vfat 程序不存在，请安装 dosfstools"
        exit 1
    fi

    if gawk --version >/dev/null;then
        echo "check gawk ok"
    else
        echo "gawk 程序不存在，请安装 gawk"
        exit 1
    fi

    if uuidgen>/dev/null;then
        echo "check uuidgen ok"
    else
        echo "uuidgen 程序不存在，请安装 uuid-runtime"
        exit 1
    fi

    if losetup -V >/dev/null;then
        echo "check losetup ok"
    else
        echo "losetup 程序不存在，请安装 mount"
        exit 1
    fi

    lsblk_version=$(lsblk --version|awk '{print $NF}' 2>/dev/null)
    if [ "$lsblk_version" != "" ];then
        m_v=$(echo ${lsblk_version} | cut -d '.' -f1)
        s_v=$(echo ${lsblk_version} | cut -d '.' -f2)
        if [ $m_v -gt 2 ] || [ $m_v -eq 2 ] && [ $s_v -ge 33 ];then
            echo "check lsblk ok"
        else
            echo "lsblk 需要版本 2.33 或更高的版本, 当前的版本是 $lsblk_version !"
            exit 1
        fi        
    else
        echo "lsblk 程序不存在，请安装 util-linux"
        exit 1
    fi

    if parted --version >/dev/null 2>&1;then
        echo "check parted ok"
    else
        echo "parted 程序不存在，请安装 parted"
        exit 1
    fi
    echo
}

function wait_dev() {
    while [ ! -b $1 ];do
        echo "wait for $1 ..."
        sleep 1
    done
    sleep 1
}

function init_work_env() {
    export WORK_DIR="${PWD}/tmp"
    [ -d ${WORK_DIR} ] || mkdir -p ${WORK_DIR}
    echo "The work directory is : [$WORK_DIR]"

    export TEMP_DIR=$(mktemp -p $WORK_DIR)
    rm -rf $TEMP_DIR
    mkdir -p $TEMP_DIR
    echo "The temporary directory is : [$TEMP_DIR]"

    export TGT_BOOT=${TEMP_DIR}/tgt_boot
    export TGT_ROOT=${TEMP_DIR}/tgt_root
    mkdir -p $TGT_BOOT $TGT_ROOT
    echo "The target boot directory is : [$TGT_BOOT]"
    echo "The target rootfs directory is : [$TGT_ROOT]"

    export OUTPUT_DIR="${PWD}/output/"
    [ -d ${OUTPUT_DIR} ] || mkdir -p ${OUTPUT_DIR}
    echo "The output directory is : [$OUTPUT_DIR]"

    losetup -D
    echo 
}

function detach_loopdev() {
    cd ${TEMP_DIR}
    umount -f * 2>/dev/null
    losetup -D
    rm -rf ${TEMP_DIR}
}

function extract_rootfs_files() {
   echo -n "正在释放 Openwrt rootfs 压缩包 ... "
   (
       cd ${TGT_ROOT} && \
          tar --exclude="./lib/firmware/*" --exclude="./lib/modules/*" -xzf "$OPWRT_ROOTFS_GZ" && \
          rm -rf "./lib/firmware/*" "./lib/modules/*" && \
          mkdir -p .reserved boot rom proc sys run && \
          sync
   )
   if [ $? -ne 0 ];then
        echo "失败！"
        detach_loopdev
        exit 1
   else 
        echo "完成"
   fi

   echo -n "正在释放 Armbian firmware 压缩包 ... "
   ( cd ${TGT_ROOT} && tar xJf "$FIRMWARE_TXZ" && sync )
   if [ $? -ne 0 ];then
        echo "失败！"
        detach_loopdev
        exit 1
   else 
        echo "完成"
   fi

   if [ -d "${FMW_HOME}" ];then
       echo -n "正在复制 Added firmware 文件 ... "
       ( cd ${TGT_ROOT} && cp -a ${FMW_HOME}/* lib/firmware/ && sync )
       if [ $? -ne 0 ];then
            echo "失败！"
            detach_loopdev
            exit 1
       else 
            echo "完成"
       fi
   fi

   echo -n "正在释放 Kernel modules 压缩包 ... "
   ( 
      cd ${TGT_ROOT} && \
          mkdir -p lib/modules && \
          cd lib/modules && \
          tar xzf ${MODULES_TGZ} && \
          sync
   )
   if [ $? -ne 0 ];then
        echo "失败！"
        detach_loopdev
        exit 1
   else 
        echo "完成"
   fi
}

function extract_amlogic_boot_files() {
    echo -n "正在释放 Kernel zImage、uInitrd 及 dtbs 压缩包 ... "
    ( 
        cd ${TGT_BOOT} && \
            cp "${BOOTFILES_HOME}"/* . && \
            tar xzf "${BOOT_TGZ}" && \
            rm -f initrd.img-${KERNEL_VERSION} && \
            cp vmlinuz-${KERNEL_VERSION} zImage && \
            cp uInitrd-${KERNEL_VERSION} uInitrd && \
            cp ${UBOOT_WITHOUT_FIP_HOME}/* . && \
            mkdir -p dtb/amlogic && \
            cd dtb/amlogic && \
            tar xzf "${DTBS_TGZ}" && \
            sync
    )
    if [ $? -ne 0 ];then
         echo "失败！"
         detach_loopdev
         exit 1
    else 
         echo "完成"
    fi
}

function extract_rockchip_boot_files() {
    echo -n "正在释放 Kernel zImage、uInitrd 及 dtbs 压缩包 ... "
    ( 
          cd ${TGT_BOOT} && \
              cp "${BOOTFILES_HOME}"/* . && \
              tar xzf "${BOOT_TGZ}" && \
              rm -f initrd.img-${KERNEL_VERSION} && \
              ln -sf vmlinuz-${KERNEL_VERSION} Image && \
              ln -sf uInitrd-${KERNEL_VERSION} uInitrd && \
              mkdir -p dtb-${KERNEL_VERSION}/rockchip && \
              ln -sf dtb-${KERNEL_VERSION} dtb && \
              cd dtb/rockchip && \
              tar xzf "${DTBS_TGZ}" && \
              sync
    )
    if [ $? -ne 0 ];then
        echo "失败！"
        detach_loopdev
        exit 1
    else 
        echo "完成"
    fi
}

function extract_allwinner_boot_files() {
    echo -n "正在释放 Kernel zImage、uInitrd 及 dtbs 压缩包 ... "
    ( 
        cd ${TGT_BOOT} && \
            cp "${BOOTFILES_HOME}"/* . && \
            tar xzf "${BOOT_TGZ}" && \
            rm -f initrd.img-${KERNEL_VERSION} && \
            cp vmlinuz-${KERNEL_VERSION} zImage && \
            cp uInitrd-${KERNEL_VERSION} uInitrd && \
            mkdir -p dtb/allwinner && \
            cd dtb/allwinner && \
            tar xzf "${DTBS_TGZ}" && \
            sync
    )
    if [ $? -ne 0 ];then
        echo "失败！"
        detach_loopdev
        exit 1
    else 
        echo "完成"
    fi
}
